{"version":3,"sources":["images/ARROWOPEN.svg","images/ARROWCLOSE.svg","images/LOGO.svg","images/deletePlanet.svg","components/Logo.js","components/TableRow.js","containers/PlanetTable.js","components/PlanetBoard.js","containers/Movie.js","components/MovieBoard.js","components/PlanetList.js","components/SelectedPlanets.js","containers/AddForm.js","components/AddBoard.js","containers/AddMovie.js","containers/App.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","className","src","logo","alt","TableRow","_ref","data","name","rotation_period","orbital_period","diameter","climate","surface_water","population","align","PlanetTable","state","planetList","planetName","direction","rotationPeriod","orbitalPeriod","surfaceWater","handleSort","column","e","_this","length","sortedPlanetList","convertedPlanetList","planetNames","map","planet","props","key","sort","b","forEach","push","filter","unsortedPlanet","setState","strArr","numArr","rotationPeriods","item","isNaN","concat","orbitalPeriods","diameters","climates","surfaceWaters","populations","prevProps","planetDetails","this","index","components_TableRow","prevState","Object","toConsumableArray","onClick","loadingPlanets","active","colSpan","react_spinners","sizeUnit","size","color","loading","React","Component","PlanetBoard","containers_PlanetTable","Movie","movieDetails","handleCollapse","undefined","handleFetchPlanet","planets","apis","api","fetch","then","response","ok","json","Error","status","catch","error","console","log","movie","umd","title","arrowClose","arrowOpen","components_PlanetBoard","MovieBoard","movieList","movies","loadingMovies","containers_Movie","uuid","v4","lading","PlanetList","handlePlanetSelection","SelectedPlanets","selectedPlanets","handleDeletePlanet","lis","deletePlanet","AddForm","movieTitle","selectedPlanetsWithDetails","errors","capitalLetter","movieTitleLength","messages","capitalLetter_incorrect","movieTitleLength_incorrect","selectedPlanets_incorrect","handleAddMovieTitle","target","value","formValidation","word","correct","toLowerCase","handleSubmit","preventDefault","validation","handleAddMovie","handleSearch","results","indexOf","_this2","movieTitleRed","addPlanetRed","autoComplete","onSubmit","style","htmlFor","type","id","placeholder","onChange","components_SelectedPlanets","components_PlanetList","AddBoard","containers_AddForm","AddMovie","components_AddBoard","App","url","components_Logo","components_MovieBoard","containers_AddMovie","ReactDOM","render","containers_App","document","getElementById"],"mappings":"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","file":"static/js/main.9cacb26a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ARROWOPEN.4d66597d.svg\";","module.exports = __webpack_public_path__ + \"static/media/ARROWCLOSE.9f3a719a.svg\";","module.exports = __webpack_public_path__ + \"static/media/LOGO.8b6d4945.svg\";","module.exports = __webpack_public_path__ + \"static/media/deletePlanet.4b823e92.svg\";","import React from 'react';\r\nimport logo from '../images/LOGO.svg';\r\n\r\nconst Logo = () => {\r\n  return <img className=\"logo\" src={logo} alt=\"logo\"/>\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\n\r\nconst TableRow = ({data}) => {\r\n  return (  \r\n    <tbody>\r\n    <tr className=\"desktop\">\r\n        <td>{data.name}</td>\r\n        <td>{data.rotation_period}</td>\r\n        <td>{data.orbital_period}</td>\r\n        <td>{data.diameter}</td>\r\n        <td>{data.climate}</td>\r\n        <td>{data.surface_water}</td>\r\n        <td>{data.population}</td>\r\n      </tr>\r\n      <tr className=\"mobile\">\r\n        <td align=\"left\">Planet Name</td>\r\n        <td align=\"left\">{data.name}</td>\r\n      </tr>\r\n      <tr className=\"mobile\">\r\n        <td align=\"left\">Rotation period</td>\r\n        <td align=\"left\">{data.rotation_period}</td>\r\n      </tr>\r\n      <tr className=\"mobile\">\r\n        <td align=\"left\">Orbital period</td>\r\n        <td align=\"left\">{data.orbital_period}</td>\r\n      </tr>\r\n      <tr className=\"mobile\">\r\n        <td align=\"left\">Diameter</td>\r\n        <td align=\"left\">{data.diameter}</td>\r\n      </tr>\r\n      <tr className=\"mobile\">\r\n        <td align=\"left\">Climate</td>\r\n        <td align=\"left\">{data.climate}</td>\r\n      </tr>\r\n      <tr className=\"mobile\">\r\n        <td align=\"left\">Surface water</td>\r\n        <td align=\"left\">{data.surface_water}</td>\r\n      </tr>\r\n      <tr className=\"mobile\">\r\n        <td align=\"left\">Population</td>\r\n        <td align=\"left\">{data.population}</td>\r\n      </tr>\r\n    </tbody>\r\n      \r\n  );\r\n}\r\n \r\nexport default TableRow;","import React from 'react';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport TableRow from '../components/TableRow';\r\n\r\nclass PlanetTable extends React.Component {\r\n\r\n  state = {\r\n    planetList: [],\r\n    planetName: {\r\n      direction: \"asc\"\r\n    },\r\n    rotationPeriod: {\r\n      direction: \"asc\"\r\n    },\r\n    orbitalPeriod: {\r\n      direction: \"asc\"\r\n    },\r\n    diameter: {\r\n      direction: \"asc\"\r\n    },\r\n    climate: {\r\n      direction: \"asc\"\r\n    },\r\n    surfaceWater: {\r\n      direction: \"asc\"\r\n    },\r\n    population: {\r\n      direction: \"asc\"\r\n    },\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n  \r\n    if(prevProps.planetDetails !== this.props.planetDetails) {\r\n      let planetList;\r\n      planetList = this.props.planetDetails.map((planet, index) => <TableRow key={index} data={planet} />)\r\n      this.setState(prevState => {\r\n        return {\r\n          planetList: [...planetList],\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleSort = (column) => (e) => {\r\n    if(this.state.planetList.length > 0) {\r\n      if(column === \"planetName\") {\r\n        let sortedPlanetList = [];\r\n        let convertedPlanetList = [];\r\n        let planetNames = this.state.planetList.map(planet => {\r\n          return {\r\n            planetName: planet.props.data.name,\r\n            key: planet.key\r\n          }\r\n        })\r\n\r\n        if(this.state.planetName.direction === \"asc\") {\r\n    \r\n          planetNames.sort((a, b) => {\r\n            if(a.planetName < b.planetName) {\r\n              return -1;\r\n            }\r\n            if(a.planetName > b.planetName) {\r\n              return 1;\r\n            }\r\n            return 0\r\n          })\r\n  \r\n          planetNames.forEach(planet => {\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          })\r\n  \r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n          \r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            planetName: {\r\n              direction: \"desc\"\r\n            }\r\n          })\r\n        } else {\r\n          planetNames.sort((a, b) => {\r\n            if(b.planetName < a.planetName) {\r\n              return -1;\r\n            }\r\n            if(b.planetName > a.planetName) {\r\n              return 1;\r\n            }\r\n            return 0\r\n          })\r\n  \r\n          planetNames.forEach(planet => {\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          })\r\n  \r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n          \r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            planetName: {\r\n              direction: \"asc\"\r\n            }\r\n          })\r\n        }\r\n      } else if (column === \"rotationPeriod\") {\r\n        let strArr = [];\r\n        let numArr = [];\r\n        let sortedPlanetList = [];\r\n        let convertedPlanetList = [];\r\n        let rotationPeriods = this.state.planetList.map(planet => {\r\n          return {\r\n            rotationPeriod: planet.props.data.rotation_period,\r\n            key: planet.key\r\n          }\r\n        })\r\n\r\n        if(this.state.rotationPeriod.direction === \"asc\") {\r\n          rotationPeriods.forEach(item => isNaN(item.rotationPeriod) ? strArr.push(item) : numArr.push(item))\r\n\r\n          numArr.sort((a, b) => a.rotationPeriod - b.rotationPeriod)\r\n          rotationPeriods = numArr.concat(strArr);\r\n          rotationPeriods.forEach(planet => (\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          ))\r\n\r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n          \r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            rotationPeriod: {\r\n              direction: \"desc\"\r\n            }\r\n          })\r\n\r\n        } else {\r\n          rotationPeriods.forEach(item => isNaN(item.rotationPeriod) ? strArr.push(item) : numArr.push(item))\r\n\r\n          numArr.sort((a, b) => b.rotationPeriod - a.rotationPeriod)\r\n          rotationPeriods = strArr.concat(numArr);\r\n          rotationPeriods.forEach(planet => (\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          ))\r\n\r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n          \r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            rotationPeriod: {\r\n              direction: \"asc\"\r\n            }\r\n          })\r\n        }\r\n      } else if (column === \"orbitalPeriod\") {\r\n        let strArr = [];\r\n        let numArr = [];\r\n        let sortedPlanetList = [];\r\n        let convertedPlanetList = [];\r\n        let orbitalPeriods = this.state.planetList.map(planet => {\r\n          return {\r\n            orbitalPeriod: planet.props.data.orbital_period,\r\n            key: planet.key\r\n          }\r\n        })\r\n\r\n        if(this.state.orbitalPeriod.direction === \"asc\") {\r\n          orbitalPeriods.forEach(item => isNaN(item.orbitalPeriod) ? strArr.push(item) : numArr.push(item))\r\n\r\n          numArr.sort((a, b) => a.orbitalPeriod - b.orbitalPeriod)\r\n          orbitalPeriods = numArr.concat(strArr);\r\n          orbitalPeriods.forEach(planet => (\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          ))\r\n\r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n\r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            orbitalPeriod: {\r\n              direction: \"desc\"\r\n            }\r\n          })\r\n\r\n        } else {\r\n          orbitalPeriods.forEach(item => isNaN(item.orbitalPeriod) ? strArr.push(item) : numArr.push(item))\r\n\r\n          numArr.sort((a, b) => b.orbitalPeriod - a.orbitalPeriod)\r\n          orbitalPeriods = strArr.concat(numArr);\r\n          orbitalPeriods.forEach(planet => (\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          ))\r\n\r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n\r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            orbitalPeriod: {\r\n              direction: \"asc\"\r\n            }\r\n          })\r\n        }\r\n      } else if (column === \"diameter\") {\r\n        let strArr = [];\r\n        let numArr = [];\r\n        let sortedPlanetList = [];\r\n        let convertedPlanetList = [];\r\n        let diameters = this.state.planetList.map(planet => {\r\n          return {\r\n            diameter: planet.props.data.diameter,\r\n            key: planet.key\r\n          }\r\n        })\r\n\r\n        if(this.state.diameter.direction === \"asc\") {\r\n          diameters.forEach(item => isNaN(item.diameter) ? strArr.push(item) : numArr.push(item))\r\n\r\n          numArr.sort((a, b) => a.diameter - b.diameter)\r\n          diameters = numArr.concat(strArr);\r\n          diameters.forEach(planet => (\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          ))\r\n\r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n\r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            diameter: {\r\n              direction: \"desc\"\r\n            }\r\n          })\r\n\r\n        } else {\r\n          diameters.forEach(item => isNaN(item.diameter) ? strArr.push(item) : numArr.push(item))\r\n\r\n          numArr.sort((a, b) => b.diameter - a.diameter)\r\n          diameters = strArr.concat(numArr);\r\n          diameters.forEach(planet => (\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          ))\r\n\r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n\r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            diameter: {\r\n              direction: \"asc\"\r\n            }\r\n          })\r\n        }\r\n      } else if (column === \"climate\") {\r\n        let sortedPlanetList = [];\r\n        let convertedPlanetList = [];\r\n        let climates = this.state.planetList.map(planet => {\r\n          return {\r\n            climate: planet.props.data.climate,\r\n            key: planet.key\r\n          }\r\n        })\r\n\r\n        if(this.state.climate.direction === \"asc\") {\r\n    \r\n          climates.sort((a, b) => {\r\n            if(a.climate < b.climate) {\r\n              return -1;\r\n            }\r\n            if(a.climate > b.climate) {\r\n              return 1;\r\n            }\r\n            return 0\r\n          })\r\n  \r\n          climates.forEach(planet => {\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          })\r\n  \r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n          \r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            climate: {\r\n              direction: \"desc\"\r\n            }\r\n          })\r\n        } else {\r\n          climates.sort((a, b) => {\r\n            if(b.climate < a.climate) {\r\n              return -1;\r\n            }\r\n            if(b.climate > a.climate) {\r\n              return 1;\r\n            }\r\n            return 0\r\n          })\r\n  \r\n          climates.forEach(planet => {\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          })\r\n  \r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n          \r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            climate: {\r\n              direction: \"asc\"\r\n            }\r\n          })\r\n        }\r\n      } else if (column === \"surfaceWater\") {\r\n        let strArr = [];\r\n        let numArr = [];\r\n        let sortedPlanetList = [];\r\n        let convertedPlanetList = [];\r\n        let surfaceWaters = this.state.planetList.map(planet => {\r\n          return {\r\n            surfaceWater: planet.props.data.surface_water,\r\n            key: planet.key\r\n          }\r\n        })\r\n\r\n        if(this.state.surfaceWater.direction === \"asc\") {\r\n          surfaceWaters.forEach(item => isNaN(item.surfaceWater) ? strArr.push(item) : numArr.push(item))\r\n\r\n          numArr.sort((a, b) => a.surfaceWater - b.surfaceWater)\r\n          surfaceWaters = numArr.concat(strArr);\r\n          surfaceWaters.forEach(planet => (\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          ))\r\n\r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n\r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            surfaceWater: {\r\n              direction: \"desc\"\r\n            }\r\n          })\r\n\r\n        } else {\r\n          surfaceWaters.forEach(item => isNaN(item.surfaceWater) ? strArr.push(item) : numArr.push(item))\r\n\r\n          numArr.sort((a, b) => b.surfaceWater - a.surfaceWater)\r\n          surfaceWaters = strArr.concat(numArr);\r\n          surfaceWaters.forEach(planet => (\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          ))\r\n\r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n\r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            surfaceWater: {\r\n              direction: \"asc\"\r\n            }\r\n          })\r\n        }\r\n      } else if (column === \"population\") {\r\n        let strArr = [];\r\n        let numArr = [];\r\n        let sortedPlanetList = [];\r\n        let convertedPlanetList = [];\r\n        let populations = this.state.planetList.map(planet => {\r\n          return {\r\n            population: planet.props.data.population,\r\n            key: planet.key\r\n          }\r\n        })\r\n\r\n        if(this.state.population.direction === \"asc\") {\r\n          populations.forEach(item => isNaN(item.population) ? strArr.push(item) : numArr.push(item))\r\n\r\n          numArr.sort((a, b) => a.population - b.population)\r\n          populations = numArr.concat(strArr);\r\n          populations.forEach(planet => (\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          ))\r\n\r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n\r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            population: {\r\n              direction: \"desc\"\r\n            }\r\n          })\r\n\r\n        } else {\r\n          populations.forEach(item => isNaN(item.population) ? strArr.push(item) : numArr.push(item))\r\n\r\n          numArr.sort((a, b) => b.population - a.population)\r\n          populations = strArr.concat(numArr);\r\n          populations.forEach(planet => (\r\n            sortedPlanetList.push(this.state.planetList.filter(unsortedPlanet => unsortedPlanet.key === planet.key))\r\n          ))\r\n\r\n          sortedPlanetList.forEach(planet => convertedPlanetList.push(planet[0]))\r\n\r\n          this.setState({\r\n            planetList: convertedPlanetList,\r\n            population: {\r\n              direction: \"asc\"\r\n            }\r\n          })\r\n        }\r\n      }\r\n    } \r\n  };\r\n\r\n  render() {\r\n\r\n    return(\r\n      <table className=\"planetTable\">\r\n        <thead>\r\n          <tr>\r\n            <th><div className=\"headerBox\"><span>Planet Name</span> <div onClick={this.handleSort(\"planetName\")} className=\"sortIcon\"><div>&#9650;</div><div>&#9660;</div></div></div></th>\r\n            <th><div className=\"headerBox\"><span>Rotation period</span><div onClick={this.handleSort(\"rotationPeriod\")} className=\"sortIcon\"><div>&#9650;</div><div>&#9660;</div></div></div></th>\r\n            <th><div className=\"headerBox\"><span>Orbital period</span><div onClick={this.handleSort(\"orbitalPeriod\")} className=\"sortIcon\"><div>&#9650;</div><div>&#9660;</div></div></div></th>\r\n            <th><div className=\"headerBox\"><span>Diameter</span><div onClick={this.handleSort(\"diameter\")} className=\"sortIcon\"><div>&#9650;</div><div>&#9660;</div></div></div></th>\r\n            <th><div className=\"headerBox\"><span>Climate</span><div onClick={this.handleSort(\"climate\")} className=\"sortIcon\"><div>&#9650;</div><div>&#9660;</div></div></div></th>\r\n            <th><div className=\"headerBox\"><span>Surface water</span><div onClick={this.handleSort(\"surfaceWater\")} className=\"sortIcon\"><div>&#9650;</div><div>&#9660;</div></div></div></th>\r\n            <th><div className=\"headerBox\"><span>Population</span><div onClick={this.handleSort(\"population\")} className=\"sortIcon\"><div>&#9650;</div><div>&#9660;</div></div></div></th>\r\n          </tr>\r\n        </thead>\r\n        {(this.props.loadingPlanets && this.props.active) &&  <tbody><tr className=\"planetLoader\"><td colSpan={7}><ClipLoader sizeUnit={\"px\"} size={50} color={\"#1BA1BE\"} loading={this.props.loadingPlanets} /></td></tr></tbody>}\r\n        {!this.props.loadingPlanets && this.state.planetList}\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PlanetTable;","import React from 'react';\r\nimport PlanetTable from '../containers/PlanetTable';\r\n\r\nconst PlanetBoard = ({planetDetails, loadingPlanets, active}) => {\r\n  return (  \r\n      <PlanetTable \r\n        planetDetails={planetDetails} \r\n        loadingPlanets={loadingPlanets}\r\n        active={active}\r\n      />\r\n);\r\n}\r\n\r\nexport default PlanetBoard;","import React from 'react';\r\nimport arrowOpen from '../images/ARROWOPEN.svg';\r\nimport arrowClose from '../images/ARROWCLOSE.svg';\r\nimport PlanetBoard from '../components/PlanetBoard';\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionItemTitle,\r\n  AccordionItemBody,\r\n} from 'react-accessible-accordion';\r\n\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\n\r\nclass Movie extends React.Component {\r\n\r\n  state = {\r\n    active: false,\r\n    loadingPlanets: true,\r\n    movieDetails: null,\r\n    planetDetails: [],\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      movieDetails: this.props.movie\r\n    })\r\n  }\r\n\r\n  componentWillUpdate() {\r\n\r\n    if(this.state.active && this.state.movieDetails) {\r\n      if(this.state.movieDetails.planets.length === this.state.planetDetails.length + 1) {\r\n        this.setState({\r\n          loadingPlanets: false\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCollapse = () => {\r\n\r\n    if(!this.state.active) {\r\n      this.setState(prevState => {\r\n        return {\r\n          active: !prevState.active\r\n        }\r\n      })\r\n\r\n      if(this.state.movieDetails !==  undefined) {\r\n        this.handleFetchPlanet(this.state.movieDetails.planets);\r\n      }\r\n      \r\n    } else {\r\n      this.setState(prevState => {\r\n        return {\r\n          active: !prevState.active,\r\n          planetDetails: [],\r\n          loadingPlanets: true,\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleFetchPlanet = (apis) => {\r\n      const apisList = apis;\r\n      apisList.forEach(api => {\r\n        fetch(api)\r\n        .then(response => {\r\n          if(response.ok) {\r\n           return response.json()\r\n          }\r\n          throw Error(response.status)\r\n        })\r\n        .then(data => {\r\n          this.setState(prevState => {\r\n            return {\r\n              planetDetails: [...prevState.planetDetails, data]\r\n            }\r\n          })\r\n        })\r\n        .catch(error => console.log(error))\r\n      })\r\n  }\r\n\r\n  render() {\r\n\r\n    return(\r\n      <li className=\"movie\">\r\n        <Accordion className=\"acc\">\r\n          <AccordionItem>\r\n              <AccordionItemTitle className=\"accItemTitle\">\r\n                <div className=\"headerContainer\" onClick={this.handleCollapse}>\r\n                  <p className=\"movieTitle\">{this.props.movie && this.props.movie.title}</p>\r\n                  <img className=\"arrow\" src={this.state.active ? arrowClose : arrowOpen } alt=\"open arrow\"/>\r\n                </div>\r\n              </AccordionItemTitle>\r\n              <AccordionItemBody>\r\n                <PlanetBoard \r\n                  planetDetails={this.state.planetDetails}\r\n                  loadingPlanets={this.state.loadingPlanets}\r\n                  active={this.state.active}\r\n                />\r\n              </AccordionItemBody>\r\n          </AccordionItem>\r\n        </Accordion>\r\n      </li>\r\n    )\r\n  }\r\n}\r\n \r\nexport default Movie;","import React from 'react';\r\nimport Movie from '../containers/Movie';\r\nimport { ClipLoader } from 'react-spinners';\r\nimport uuid from 'uuid';\r\n\r\nconst MovieBoard = ({movies, loadingMovies}) => {\r\n\r\n  let movieList\r\n\r\n  if(movies !== null) {\r\n    movieList = movies.map(movie => (\r\n      <Movie key={uuid.v4()} movie={movie} />\r\n    ))\r\n  }\r\n\r\n  return (  \r\n    <ul className=\"movieBoard\">\r\n      {loadingMovies ? <div className=\"movieLoader\"><ClipLoader sizeUnit={\"px\"} size={50} color={\"#1BA1BE\"} lading={loadingMovies} /></div> : movieList }\r\n    </ul>\r\n  );\r\n}\r\n \r\nexport default MovieBoard;","import React from 'react';\r\n\r\nconst PlanetList = ({planets, handlePlanetSelection}) => {\r\n  let planetList = planets.map(planet => <li onClick={() => handlePlanetSelection(planet.name)} key={planet.name}>{planet.name}</li>)\r\n  return (  \r\n    <ul className=\"planetList\">\r\n      {planetList}\r\n    </ul>\r\n  );\r\n}\r\n \r\nexport default PlanetList;","import React from 'react';\r\nimport deletePlanet from '../images/deletePlanet.svg'\r\n\r\nconst SelectedPlanets = ({selectedPlanets, handleDeletePlanet}) => {\r\n\r\n  let lis = selectedPlanets.map(planet => <li key={planet}>{planet} <button onClick={(e) => handleDeletePlanet(e, planet)}><img src={deletePlanet} alt=\"delete planet button\"/></button></li>)\r\n\r\n  return (  \r\n    <ul className=\"selectedPlanets\">{lis}</ul>\r\n  );\r\n}\r\n \r\nexport default SelectedPlanets;","import React from 'react';\r\nimport PlanetList from '../components/PlanetList';\r\nimport SelectedPlanets from '../components/SelectedPlanets';\r\n\r\nclass AddForm extends React.Component {\r\n\r\n  state = {\r\n    movieTitle: \"\",\r\n    planetName: \"\",\r\n    planets: [],\r\n    selectedPlanets: [],\r\n    selectedPlanetsWithDetails: [],\r\n    errors: {\r\n      capitalLetter: false,\r\n      movieTitleLength: false,\r\n      selectedPlanets: false\r\n    }\r\n  }\r\n\r\n  messages = {\r\n    capitalLetter_incorrect: \"Movie title must start with a capital letter\",\r\n    movieTitleLength_incorrect: \"Movie title must be at least three letters long\",\r\n    selectedPlanets_incorrect: \"Please add at least one planet\"\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if(prevProps.active !== this.props.active) {\r\n      this.setState({\r\n        movieTitle: \"\",\r\n        planetName: \"\",\r\n        planets: [],\r\n        selectedPlanets: [],\r\n        selectedPlanetsWithDetails: [],\r\n        errors: {\r\n          capitalLetter: false,\r\n          movieTitleLength: false,\r\n          selectedPlanets: false\r\n        }\r\n      })\r\n    }\r\n\r\n    if(prevState.selectedPlanets !== this.state.selectedPlanets) {\r\n      if(this.state.selectedPlanets[this.state.selectedPlanets.length-1] !== undefined && this.state.selectedPlanets.length > prevState.selectedPlanets.length) {\r\n        fetch(`https://swapi.co/api/planets?search=${this.state.selectedPlanets[this.state.selectedPlanets.length-1]}`)\r\n        .then(response => {\r\n          if(response.ok) {\r\n            return response.json()\r\n          }\r\n          throw Error(response.status)\r\n        })\r\n        .then(data => {\r\n          this.setState(prevState => {\r\n            return {\r\n              selectedPlanetsWithDetails: [...prevState.selectedPlanetsWithDetails, data.results]\r\n            }\r\n          })\r\n        })\r\n        .catch(error => console.log(error))\r\n      }\r\n    }\r\n  }\r\n\r\n  handleAddMovieTitle = (e) => {\r\n    this.setState({\r\n      movieTitle: e.target.value\r\n    })\r\n  }\r\n\r\n  formValidation = () => {\r\n    let capitalLetter = false;\r\n    let movieTitleLength = false;\r\n    let correct = false;\r\n    let selectedPlanets = false;\r\n\r\n    const initialIsCaptial = word => {\r\n      return word[0] !== word[0].toLowerCase();\r\n    }\r\n\r\n    if(this.state.movieTitle && initialIsCaptial(this.state.movieTitle)) {\r\n      capitalLetter = true;\r\n    }\r\n\r\n    if(this.state.movieTitle.length > 2) {\r\n      movieTitleLength = true;\r\n    }\r\n\r\n    if(this.state.selectedPlanets.length > 0) {\r\n      selectedPlanets = true;\r\n    }\r\n\r\n    if(capitalLetter && movieTitleLength && selectedPlanets) {\r\n      correct = true;\r\n    }\r\n\r\n    return({\r\n      capitalLetter,\r\n      movieTitleLength,\r\n      selectedPlanets,\r\n      correct\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const validation = this.formValidation();\r\n    \r\n    if(validation.correct) {\r\n      this.props.handleAddMovie(this.state.selectedPlanetsWithDetails, this.state.movieTitle)\r\n      this.setState({\r\n        movieTitle: \"\",\r\n        planetName: \"\",\r\n        planets: [],\r\n        selectedPlanets: [],\r\n        selectedPlanetsWithDetails: [],\r\n        errors: {\r\n          capitalLetter: false,\r\n          movieTitleLength: false\r\n        }\r\n      })\r\n    } else {\r\n      this.setState({\r\n        errors: {\r\n          capitalLetter: !validation.capitalLetter,\r\n          movieTitleLength: !validation.movieTitleLength,\r\n          selectedPlanets: !validation.selectedPlanets\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleSearch = (e) => {\r\n    if(e.target.value.length !== 0) {\r\n      fetch(`https://swapi.co/api/planets?search=${e.target.value}`)\r\n      .then(response => {\r\n        if(response.ok) {\r\n          return response.json()\r\n        }\r\n        throw Error(response.status)\r\n      })\r\n      .then(data => {\r\n        this.setState({\r\n          planets: [...data.results]\r\n        })\r\n      })\r\n      .catch(error => console.log(error))\r\n    } else {\r\n      this.setState({\r\n        planets: []\r\n      })\r\n    }\r\n      \r\n    this.setState({\r\n      planetName: e.target.value\r\n    })\r\n  }\r\n\r\n  handlePlanetSelection = planetName => { \r\n    if(this.state.selectedPlanets.indexOf(planetName) === -1) {\r\n      this.setState(prevState => {\r\n        return {\r\n          selectedPlanets: [...prevState.selectedPlanets, planetName]\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  handleDeletePlanet = (e, planetName) => {\r\n    e.preventDefault();\r\n    const selectedPlanets = this.state.selectedPlanets.filter(planet => planet !== planetName)\r\n    const selectedPlanetsWithDetails = this.state.selectedPlanetsWithDetails.filter(planet => planet[0].name !== planetName)\r\n    this.setState({\r\n      selectedPlanets,\r\n      selectedPlanetsWithDetails\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let movieTitleRed;\r\n    let addPlanetRed;\r\n\r\n    if(this.state.errors.capitalLetter || this.state.errors.movieTitleLength) {\r\n      movieTitleRed = {\r\n        color: \"red\"\r\n      }\r\n    }\r\n\r\n    if(this.state.errors.selectedPlanets) {\r\n      addPlanetRed = {\r\n        color: \"red\"\r\n      }\r\n    }\r\n    \r\n\r\n    return (\r\n      <form autoComplete=\"off\" className=\"addForm\" onSubmit={this.handleSubmit}>\r\n        <label style={movieTitleRed} htmlFor=\"movieTitle\">Movie title</label>\r\n        <input type=\"text\" id=\"movieTitle\" name=\"movieTitle\" placeholder=\"Please enter the title of the movie\" value={this.state.movieTitle} onChange={this.handleAddMovieTitle}/>\r\n        {(this.state.errors.capitalLetter || this.state.errors.movieTitleLength) && <span>{this.state.errors.capitalLetter && `${this.messages.capitalLetter_incorrect}. `} {this.state.errors.movieTitleLength && `${this.messages.movieTitleLength_incorrect}.`}</span>}\r\n        {this.state.selectedPlanets.length > 0 && <SelectedPlanets handleDeletePlanet={this.handleDeletePlanet} selectedPlanets={this.state.selectedPlanets}/>}\r\n        <label style={addPlanetRed} htmlFor=\"addPlanet\">Add Planet</label>\r\n        <input type=\"text\" id=\"addPlanet\" name=\"addPlanet\" placeholder=\"Search for the planet in database\" value={this.state.planetName} onChange={this.handleSearch}/>\r\n        {this.state.errors.selectedPlanets && <span>{this.messages.selectedPlanets_incorrect}.</span>}\r\n        {this.state.planets.length > 0 && <PlanetList handlePlanetSelection={this.handlePlanetSelection} planets={this.state.planets}/>}\r\n        <button className=\"addBtn\">Add movie</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddForm;","import React from 'react';\r\nimport AddForm from '../containers/AddForm';\r\n\r\nconst AddBoard = ({active, handleAddMovie}) => {\r\n  return (  \r\n    <div className=\"addBoard\">\r\n      <AddForm \r\n        active={active} \r\n        handleAddMovie={handleAddMovie}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default AddBoard;","import React from 'react';\r\nimport arrowOpen from '../images/ARROWOPEN.svg';\r\nimport arrowClose from '../images/ARROWCLOSE.svg';\r\nimport AddBoard from '../components/AddBoard';\r\nimport {\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionItemTitle,\r\n  AccordionItemBody,\r\n} from 'react-accessible-accordion';\r\nimport 'react-accessible-accordion/dist/fancy-example.css';\r\n\r\nclass AddMovie extends React.Component {\r\n\r\n  state = {\r\n    active: false,\r\n  }\r\n\r\n  handleCollapse = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        active: !prevState.active\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Accordion className=\"addMovie\">\r\n        <AccordionItem>\r\n            <AccordionItemTitle className=\"accItemTitle\">\r\n              <div className=\"headerContainer\" onClick={this.handleCollapse}>\r\n                <p className=\"add\">Add Movie</p>\r\n                <img className=\"arrow\" src={this.state.active ? arrowClose : arrowOpen } alt=\"open arrow\"/>\r\n              </div>\r\n            </AccordionItemTitle>\r\n            <AccordionItemBody className={this.state.active ? \"boardContainer\" : ''}>\r\n              <AddBoard \r\n                active={this.state.active}\r\n                handleAddMovie={this.props.handleAddMovie}\r\n              />\r\n            </AccordionItemBody>\r\n        </AccordionItem>\r\n      </Accordion>\r\n    )\r\n  }\r\n}\r\n \r\nexport default AddMovie;","import React, { Component } from 'react';\r\nimport Logo  from '../components/Logo';\r\nimport MovieBoard from '../components/MovieBoard';\r\nimport AddMovie from '../containers/AddMovie';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    movies: null,\r\n    loadingMovies: true,\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://swapi.co/api/films/\")\r\n    .then(response => {\r\n      if(response.ok) {\r\n        return response.json()\r\n      }\r\n      throw Error(response.status)\r\n    })\r\n    .then(data => {\r\n      this.setState({\r\n        movies: [...data.results],\r\n        loadingMovies: false\r\n      })\r\n    })\r\n    .catch(error => console.log(error))\r\n  }\r\n\r\n  handleAddMovie = (selectedPlanetsWithDetails, movieTitle) => {\r\n    let planets = selectedPlanetsWithDetails;\r\n    let movie = {}\r\n    movie.title = movieTitle;\r\n    movie.planets = planets.map(planet => planet[0].url);\r\n    this.setState({\r\n      movies: [...this.state.movies, movie]\r\n    })  \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Logo />\r\n        <MovieBoard \r\n          movies={this.state.movies} \r\n          loadingMovies={this.state.loadingMovies}\r\n        />\r\n        <AddMovie handleAddMovie={this.handleAddMovie} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './scss/style.scss';\r\nimport App from './containers/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}